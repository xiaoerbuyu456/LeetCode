方法：初等数学
思路

我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。

Add Two Numbers

图1，对两数相加方法的可视化: 342 + 465 = 807342+465=807，每个结点都包含一个数字，并且数字按位逆序存储。

算法

就像你在纸上计算两个数字的和那样，我们首先从最低有效位也就是列表 l1l1 和 l2l2 的表头开始相加。由于每位数字都应当处于 0 \ldots 90…9 的范围内，我们计算两个数字的和时可能会出现 “溢出”。例如，5 + 7 = 125+7=12。在这种情况下，我们会将当前位的数值设置为 22，并将进位 carry = 1carry=1 带入下一次迭代。进位 carrycarry 必定是 00 或 11，这是因为两个数字相加（考虑到进位）可能出现的最大和为 9 + 9 + 1 = 199+9+1=19。

伪代码如下：

将当前结点初始化为返回列表的哑结点。
将进位 carrycarry 初始化为 00。
将 pp 和 qq 分别初始化为列表 l1l1 和 l2l2 的头部。
遍历列表 l1l1 和 l2l2 直至到达它们的尾端。
将 xx 设为结点 pp 的值。如果 pp 已经到达 l1l1 的末尾，则将其值设置为 00。
将 yy 设为结点 qq 的值。如果 qq 已经到达 l2l2 的末尾，则将其值设置为 00。
设定 sum = x + y + carrysum=x+y+carry。
更新进位的值，carry = sum / 10carry=sum/10。
创建一个数值为 (sum \bmod 10)(summod10) 的新结点，并将其设置为当前结点的下一个结点，然后将当前结点前进到下一个结点。
同时，将 pp 和 qq 前进到下一个结点。
检查 carry = 1carry=1 是否成立，如果成立，则向返回列表追加一个含有数字 11 的新结点。
返回哑结点的下一个结点。
请注意，我们使用哑结点来简化代码。如果没有哑结点，则必须编写额外的条件语句来初始化表头的值。

请特别注意以下情况：

测试用例	                                         说明
l1=[0,1]l1=[0,1]，l2=[0,1,2]l2=[0,1,2]	 当一个列表比另一个列表长时
l1=[]l1=[]，l2=[0,1]l2=[0,1]	           当一个列表为空时，即出现空列表
l1=[9,9]l1=[9,9]，l2=[1]l2=[1]	         求和运算最后可能出现额外的进位，这一点很容易被遗忘
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)
{
    struct ListNode *re_list,*s;
    re_list = (struct ListNode*)malloc(sizeof(struct ListNode));
    re_list->next = NULL;
    s=re_list;
    struct ListNode *p1,*p2,*p3;
    p1=l1,p2=l2;
    int temp=0;
    while(p1 != NULL && p2 != NULL){
        p3 = (struct ListNode*)malloc(sizeof(struct ListNode));
        p3->val = p1->val + p2->val;
        if(temp==1) {
            p3->val = p3->val+1;
            temp=0;
        }
        if (p3->val>=10 && temp==0){
            p3->val = (p3->val%10);
            temp = 1;
        }
        p3->next = NULL;
        s->next = p3;
        s = s->next;
        p1 = p1->next;
        p2 = p2->next;
        
    }
    while(p1 != NULL){
        p3 = (struct ListNode*)malloc(sizeof(struct ListNode));
        p3->val = p1->val;
        if(temp==1) {
            p3->val = p3->val+1;
            temp=0;
        }
        if (p3->val>=10 && temp==0){
            p3->val = (p3->val%10);
            temp = 1;
        }
        p3->next = NULL;
        s->next = p3;
        s = s->next;
        p1 = p1->next; 
    }
    while(p2 != NULL){
        p3 = (struct ListNode*)malloc(sizeof(struct ListNode));
        p3->val =p2->val;
        if(temp==1) {
            p3->val = p3->val+1;
            temp=0;
        }
        if (p3->val>=10 && temp==0){
            p3->val = (p3->val%10);
            temp = 1;
        }
        p3->next = NULL;
        s->next = p3;
        s = s->next;
        p2 = p2->next; 
    }
    if(temp==1){
        p3 = (struct ListNode*)malloc(sizeof(struct ListNode));
        p3->val =1;
        p3->next = NULL;
        s->next = p3;
    }
    return re_list->next;
}
